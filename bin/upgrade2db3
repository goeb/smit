#!/bin/sh
#set -e
usage() {
    echo "Usage: upgrade2db3 <src-repo> <dst-repo>"
    echo ""
    echo "Upgrade a v2 smit repository to a v3 format."
    echo "The environment variable SMPARSER must give the path to smparser."
    exit 1
}


# migrateObject
# $1 : source file
# $2 : directory where the file is to be moved
#
# Eg: migrateObject 01020304.x a/b/c
# => file will be moved to a/b/c/01/020304.x
migrateObject() {
    file="$1"
    dest="$2"
    basefile=$(basename -- "$file")

    prefix=$(echo $basefile | sed -e "s/\(..\).*/\\1"/)
    suffix=$(echo $basefile | sed -e "s/^..//")
    if [ -z $suffix ]; then
        echo "Cannot migrate file $file: suffix too short"
        exit 1
    fi
    mkdir -p "$dest/$prefix"
    mv $file "$dest/$prefix/$suffix"
}
# $1 : working directory of the project (where the migration is being done)
# $2 : path to the issue directory
migrateIssue() {

    local pDir="$1"
    local issue="$2"

    # get the latest entry: ie the one that is not referenced as a parent
    latest=""
    echo "examining issue: $issue..."
    for e in $(ls -- "$issue"); do
        ref=$(basename -- $e)

        if [ "$ref" = "_del" ]; then
            continue
        fi

        grep -- "+parent *$ref" "$issue"/* > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            # pattern, not found, thus we found an entry unreferenced
            if [ -n "$latest" ]; then
                echo "ERROR: found 2 possible latest in $issue"
                echo "    $latest"
                echo "    $ref"
                echo "Choosing $ref..."
            fi
            latest=$ref
            break
        fi
    done
    if [ -z "$latest" ]; then
        echo "ERROR: no latest found in $issue"
    else
        # draw the link
        issueId=$(basename -- "$issue")
        echo $latest > "$pDir/refs/issues/$issueId"
    fi
}
# migrateFileRefs
# Update the files references in a entry
# Eg: JV4cgfKVwujvGPsXaEpWTAXnAWo.pic1.png
#  -> JV4cgfKVwujvGPsXaEpWTAXnAWo/pic1.png
#                                ^
# $1 : entry to be updated with the new files references
migrateFileRefs() {
    local entry="$1"
    chmod u+w "$entry"
    # assume that there is only one +file line
    n=$(grep "^+file" "$entry" | wc -l)
    if [ $n -gt 1 ]; then
        echo "Error: entry $entry has more than one +file"
        exit 1
    elif [ $n -eq 1 ]; then
        # replace the first dot in file references by a slash
        newFiles=$(mktemp)
        echo -n "+file" > $newFiles
        # smparser give this kind of output
        # smp.1.1 +file
        # smp.1.2 JV4cgfKVwujvGPsXaEpWTAXnAWo.pic1.png
        # smp.1.3 JV4cgfKVwujvGPsXaEpWTAXnAWo.pic2.png
        grep "^+file" "$entry" | $SMPARSER - | grep -v "smp.1.1 +file" | sed -e "s/^smp\.[0-9]*\.[0-9]* //" | while read filename; do
            newF=$(echo -n $filename | sed -e "s;\.;/;" | $SMPARSER -e)
            echo -n " $newF" >> $newFiles
        done
        newFilesT=$(cat $newFiles)
        echo -n "oldFiles: "
        grep "^+file" "$entry"
        echo "newFilesT: $newFilesT"
        sed -i -e "/^+file /d" "$entry"
        echo "$newFilesT" >> "$entry"
        rm $newFiles # rm temporary file
    fi
}

# migrate the 'views' file
# $1 : project dir
migrateViews() {
    local pDir="$1"
    local views="$pDir/views"
    chmod u+w "$views"

    objectId=$(sha1sum "$views" | sed -e "s/ .*//")
    mv "$views" "$pDir/$objectId"
    migrateObject "$pDir/$objectId" "$pDir/objects"
    echo $objectId > "$pDir/refs/views"
}

# migrate the 'project' configuration file
# $1 : project dir
migrateProjectConfig() {
    local pDir="$1"
    local project="$pDir/project"
    chmod u+w "$project"
    # add parent 'null', timestamp, author
    echo "+parent null" >> "$project"
    timestamp=$(date +%s)
    echo "+ctime $timestamp" >> "$project"
    echo "+author upgrade2db3" >> "$project"

    objectId=$(sha1sum "$project" | sed -e "s/ .*//")
    mv "$project" "$pDir/$objectId"
    migrateObject "$pDir/$objectId" "$pDir/objects"
    echo $objectId > "$pDir/refs/project"
}

# main -------------------------------------------------------------------------


srcDir=$1
dstDir=$2

[ -z "$srcDir" ] && usage
[ -z "$dstDir" ] && usage

if [ ! -x "$SMPARSER" ]; then
    echo "Error: SMPARSER not defined."
    usage
fi

# check that destination dir does not exist
if [ -e "$dstDir" ]; then
    echo "Error: Destination repository must not exist"
    exit 1
fi

# first copy everything
cp -a "$srcDir" "$dstDir"

# then upgrade each project
find "$dstDir" -name project | while read p; do

    # migrate the project

    pDir=$(dirname "$p")
    echo "project: $pDir..."
    mkdir "$pDir/objects"
    mkdir -p "$pDir/refs/issues"
    mkdir -p "$pDir/refs/tags"

    # change issues to .../<p>/refs/issues/1
    find "$pDir/issues" -type d -maxdepth 1 | while read issue; do

        if [ "$issue" = "$pDir/issues" ]; then
            # this is not an issue
            continue
        fi

        migrateIssue "$pDir" "$issue" 
    done

    # change entries to .../<p>/objects/73/97ca1fb539d0ecff232eadb8a9e26f16049da2
    find "$pDir/issues" -maxdepth 2 -type f | while read entry; do
        migrateObject $entry "$pDir/objects"
    done

    # change files references in the entries
    # at this moment, the objects are all the entries
    # <sha1>.file.pdf => <sha1>/file.pdf
    find "$pDir/objects" -type f | while read entry; do

        migrateFileRefs "$entry"
    done

    # change files
    find "$pDir/files" -type f | while read file; do
        f=$(basename -- $file)
        newId=$(echo $f | sed -e "s/\..*//")
        prefix=$(echo $newId | sed -e "s/\(..\).*/\\1"/)
        suffix=$(echo $newId | sed -e "s/^..//")

        mkdir -p "$pDir/objects/$prefix"
        mv $file "$pDir/objects/$prefix/$suffix"
    done

    # change tags
    find "$pDir/tags" -type f | while read file; do
        migrateObject $file "$pDir/refs/tags"
    done

    migrateProjectConfig "$pDir"

    migrateViews "$pDir"

    # remove old directories files, issues, tags
    rm -rf "$pDir/files"
    rm -rf "$pDir/issues"
    rm -rf "$pDir/tags"

done


